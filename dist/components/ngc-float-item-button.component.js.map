{"version":3,"sources":["../../components/ngc-float-item-button.component.ts"],"names":[],"mappings":"AAAA,kFAAC;AAED,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,SAAS,EACT,uBAAuB,EACxB,MAAM,eAAA,CAAgB;AAGvB;IAAA;QAGG,UAAK,GAAW,OAAO,CAAC;QACxB,YAAO,GAAsB,IAAI,YAAY,EAAE,CAAC;QAChD,aAAQ,GAAY,KAAK,CAAC;IA+F7B,CAAC;IA3FC,oDAAc,GAAd,UAAe,MAAa;QAC1B,IAAI,IAAI,CAAC,QAAQ;YACf,OAAO,IAAI,CAAC,QAAQ,CAAC;QAEvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IACI,sCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,uBAAuB;oBACjC,MAAM,EAAE,CAAC,8lCAuDR,CAAC;oBACF,QAAQ,EAAE,saAUT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,0CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,0CAAc,GAA2C;QAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAC9B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAE;QAC5D,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAE;KAC3D,CAAC;IACF,kCAAC;CApGD,AAoGC,IAAA;SApGY,2BAA2B","file":"ngc-float-item-button.component.js","sourceRoot":"","sourcesContent":["/* created by @GustavoCostaW https://github.com/gustavocostaw/ngc-float-button  */\n\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\n\nexport class NgcFloatItemButtonComponent {\n   icon: string;\n   content: string;\n   color: string = 'white';\n   clicked: EventEmitter<any> = new EventEmitter();\n   disabled: boolean = false;\n   elementref;\n   contentref;\n\n  emitClickEvent($event: Event) {\n    if (this.disabled)\n      return this.disabled;\n\n    this.clicked.emit($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngc-float-item-button',\n  styles: [`\n\n  .item {\n    width:250px;\n    height: 40px;\n    left:-203px;\n    transform: translate3d(0, 0, 0);\n    transition: transform, opacity ease-out 200ms;\n    transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);\n    transition-duration: 180ms;\n    position: absolute;\n    cursor: pointer;\n    top:5px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n  }\n\n  .item.disabled {\n    pointer-events: none;\n  }\n\n  .item.disabled .fab-item {\n    background-color: lightgray;\n  }\n\n  .content {\n    background: #333333;\n    margin-right: 50px;\n    line-height: 25px;\n    color: white;\n    padding: 2px 7px;\n    border-radius: 3px;\n    display: none;\n    font-size: 12px;\n    height: 25px;\n    margin-top: 4px;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);\n  }\n\n  .fab-item {\n    right: 0;\n    background: white;\n    border-radius: 100%;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    color: #797979;\n    text-align: center;\n    cursor: pointer;\n    line-height: 50px;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);\n  }\n\n\n  `],\n  template: `\n    <div #elementref class=\"item {{ disabled ? 'disabled' : ''}}\"\n    (click)=\"emitClickEvent($event)\">\n        <div class=\"content-wrapper\" #contentref>\n          <div class=\"content\" [style.display]=\"content ? 'block' : 'none'\">{{content}}</div>\n        </div>\n        <a class=\"fab-item\" [style.backgroundColor]=\"color\">\n           <mat-icon> {{ icon }} </mat-icon>\n        </a>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'icon': [{ type: Input },],\n'content': [{ type: Input },],\n'color': [{ type: Input },],\n'clicked': [{ type: Output },],\n'disabled': [{ type: Input },],\n'elementref': [{ type: ViewChild, args: ['elementref', ] },],\n'contentref': [{ type: ViewChild, args: ['contentref', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}